### YamlMime:ManagedReference
items:
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate
  commentId: T:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate
  id: Rotate
  parent: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  children:
  - MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Aliases
  - MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Command
  - MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Description
  - MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute(System.ArraySegment{System.String},ICommandSender,System.String@)
  - MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.RotatingPlayers
  langs:
  - csharp
  - vb
  name: Rotate
  nameWithType: Rotate
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate
  type: Class
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    id: Rotate
    path: Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    startLine: 25
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  summary: "\nRotates a specific <see cref=\"!:MapEditorObject\"></see>.\n"
  example: []
  syntax:
    content: 'public class Rotate : ICommand'
    content.vb: >-
      Public Class Rotate
          Inherits ICommand
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Command
  commentId: P:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Command
  id: Command
  parent: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate
  langs:
  - csharp
  - vb
  name: Command
  nameWithType: Rotate.Command
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Command
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    id: Command
    path: Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    startLine: 28
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  example: []
  syntax:
    content: public string Command { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Command As String
  overload: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Command*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Aliases
  commentId: P:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Aliases
  id: Aliases
  parent: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate
  langs:
  - csharp
  - vb
  name: Aliases
  nameWithType: Rotate.Aliases
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Aliases
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    id: Aliases
    path: Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    startLine: 31
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  example: []
  syntax:
    content: public string[] Aliases { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property Aliases As String()
  overload: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Aliases*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Description
  commentId: P:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Description
  id: Description
  parent: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Rotate.Description
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Description
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    id: Description
    path: Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    startLine: 34
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  example: []
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Description As String
  overload: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Description*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute(System.ArraySegment{System.String},ICommandSender,System.String@)
  commentId: M:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute(System.ArraySegment{System.String},ICommandSender,System.String@)
  id: Execute(System.ArraySegment{System.String},ICommandSender,System.String@)
  parent: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate
  langs:
  - csharp
  - vb
  name: Execute(ArraySegment<String>, ICommandSender, out String)
  nameWithType: Rotate.Execute(ArraySegment<String>, ICommandSender, out String)
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute(System.ArraySegment<System.String>, ICommandSender, out System.String)
  type: Method
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    id: Execute
    path: Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    startLine: 37
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  example: []
  syntax:
    content: public bool Execute(ArraySegment<string> arguments, ICommandSender sender, out string response)
    parameters:
    - id: arguments
      type: System.ArraySegment{System.String}
    - id: sender
      type: ICommandSender
    - id: response
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Function Execute(arguments As ArraySegment(Of String), sender As ICommandSender, ByRef response As String) As Boolean
  overload: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute*
  nameWithType.vb: Rotate.Execute(ArraySegment(Of String), ICommandSender, ByRef String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute(System.ArraySegment(Of System.String), ICommandSender, ByRef System.String)
  name.vb: Execute(ArraySegment(Of String), ICommandSender, ByRef String)
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.RotatingPlayers
  commentId: F:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.RotatingPlayers
  id: RotatingPlayers
  parent: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate
  langs:
  - csharp
  - vb
  name: RotatingPlayers
  nameWithType: Rotate.RotatingPlayers
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.RotatingPlayers
  type: Field
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    id: RotatingPlayers
    path: Commands/ModifyingCommands/Rotation/SubCommands/Rotate.cs
    startLine: 120
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  summary: "\nThe <xref href=\"System.Collections.Generic.Dictionary%602\" data-throw-if-not-resolved=\"false\"></xref> which contains all <see cref=\"!:Player\"></see> and <see cref=\"!:CoroutineHandle\"></see> pairs.\n"
  example: []
  syntax:
    content: public static Dictionary<Player, CoroutineHandle> RotatingPlayers
    return:
      type: System.Collections.Generic.Dictionary{Player,CoroutineHandle}
    content.vb: Public Shared RotatingPlayers As Dictionary(Of Player, CoroutineHandle)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  commentId: N:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  name: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  nameWithType: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Command*
  commentId: Overload:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Command
  name: Command
  nameWithType: Rotate.Command
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Command
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Aliases*
  commentId: Overload:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Aliases
  name: Aliases
  nameWithType: Rotate.Aliases
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Aliases
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Description*
  commentId: Overload:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Description
  name: Description
  nameWithType: Rotate.Description
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Description
- uid: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute*
  commentId: Overload:MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute
  name: Execute
  nameWithType: Rotate.Execute
  fullName: MapEditorReborn.Commands.ModifyingCommands.Rotation.SubCommands.Rotate.Execute
- uid: System.ArraySegment{System.String}
  commentId: T:System.ArraySegment{System.String}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<String>
  nameWithType: ArraySegment<String>
  fullName: System.ArraySegment<System.String>
  nameWithType.vb: ArraySegment(Of String)
  fullName.vb: System.ArraySegment(Of System.String)
  name.vb: ArraySegment(Of String)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ICommandSender
  isExternal: true
  name: ICommandSender
  nameWithType: ICommandSender
  fullName: ICommandSender
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  isExternal: true
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullName.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary{Player,CoroutineHandle}
  commentId: T:System.Collections.Generic.Dictionary{Player,CoroutineHandle}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Player, CoroutineHandle>
  nameWithType: Dictionary<Player, CoroutineHandle>
  fullName: System.Collections.Generic.Dictionary<Player, CoroutineHandle>
  nameWithType.vb: Dictionary(Of Player, CoroutineHandle)
  fullName.vb: System.Collections.Generic.Dictionary(Of Player, CoroutineHandle)
  name.vb: Dictionary(Of Player, CoroutineHandle)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Player
    name: Player
    nameWithType: Player
    fullName: Player
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoroutineHandle
    name: CoroutineHandle
    nameWithType: CoroutineHandle
    fullName: CoroutineHandle
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Player
    name: Player
    nameWithType: Player
    fullName: Player
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: CoroutineHandle
    name: CoroutineHandle
    nameWithType: CoroutineHandle
    fullName: CoroutineHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
