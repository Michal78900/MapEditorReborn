### YamlMime:ManagedReference
items:
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  commentId: T:MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  id: TeleportingEventArgs
  parent: MapEditorReborn.Events.EventArgs
  children:
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.#ctor(TeleportObject,TeleportObject,Player,GameObject,Vector3,PlayerMovementSync.PlayerRotation,System.Int32)
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Destination
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.EntranceTeleport
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.ExitTeleport
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.GameObject
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.IsAllowed
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Player
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.PlayerRotation
  - MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportSoundId
  langs:
  - csharp
  - vb
  name: TeleportingEventArgs
  nameWithType: TeleportingEventArgs
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  type: Class
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: TeleportingEventArgs
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 17
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nContains all information before the object gets teleported.\n"
  example: []
  syntax:
    content: 'public class TeleportingEventArgs : EventArgs'
    content.vb: >-
      Public Class TeleportingEventArgs

          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.#ctor(TeleportObject,TeleportObject,Player,GameObject,Vector3,PlayerMovementSync.PlayerRotation,System.Int32)
  commentId: M:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.#ctor(TeleportObject,TeleportObject,Player,GameObject,Vector3,PlayerMovementSync.PlayerRotation,System.Int32)
  id: '#ctor(TeleportObject,TeleportObject,Player,GameObject,Vector3,PlayerMovementSync.PlayerRotation,System.Int32)'
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: TeleportingEventArgs(TeleportObject, TeleportObject, Player, GameObject, Vector3, PlayerMovementSync.PlayerRotation, Int32)
  nameWithType: TeleportingEventArgs.TeleportingEventArgs(TeleportObject, TeleportObject, Player, GameObject, Vector3, PlayerMovementSync.PlayerRotation, Int32)
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportingEventArgs(TeleportObject, TeleportObject, Player, GameObject, Vector3, PlayerMovementSync.PlayerRotation, System.Int32)
  type: Constructor
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: .ctor
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 22
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nInitializes a new instance of the <xref href=\"MapEditorReborn.Events.EventArgs.TeleportingEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TeleportingEventArgs(TeleportObject entranceTeleport, TeleportObject exitTeleport, Player player, GameObject gameObject, Vector3 destination, PlayerMovementSync.PlayerRotation playerRotation, int teleportSoundId)
    parameters:
    - id: entranceTeleport
      type: TeleportObject
    - id: exitTeleport
      type: TeleportObject
    - id: player
      type: Player
    - id: gameObject
      type: GameObject
    - id: destination
      type: Vector3
    - id: playerRotation
      type: PlayerMovementSync.PlayerRotation
    - id: teleportSoundId
      type: System.Int32
    content.vb: Public Sub New(entranceTeleport As TeleportObject, exitTeleport As TeleportObject, player As Player, gameObject As GameObject, destination As Vector3, playerRotation As PlayerMovementSync.PlayerRotation, teleportSoundId As Integer)
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.EntranceTeleport
  commentId: P:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.EntranceTeleport
  id: EntranceTeleport
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: EntranceTeleport
  nameWithType: TeleportingEventArgs.EntranceTeleport
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.EntranceTeleport
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: EntranceTeleport
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 36
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets the entrance teleport.\n"
  example: []
  syntax:
    content: public TeleportObject EntranceTeleport { get; }
    parameters: []
    return:
      type: TeleportObject
    content.vb: Public ReadOnly Property EntranceTeleport As TeleportObject
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.EntranceTeleport*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.ExitTeleport
  commentId: P:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.ExitTeleport
  id: ExitTeleport
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: ExitTeleport
  nameWithType: TeleportingEventArgs.ExitTeleport
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.ExitTeleport
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: ExitTeleport
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 41
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets the exit teleport.\n"
  example: []
  syntax:
    content: public TeleportObject ExitTeleport { get; }
    parameters: []
    return:
      type: TeleportObject
    content.vb: Public ReadOnly Property ExitTeleport As TeleportObject
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.ExitTeleport*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Player
  commentId: P:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Player
  id: Player
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: Player
  nameWithType: TeleportingEventArgs.Player
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Player
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: Player
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 46
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets the player that is being teleported. May be null.\n"
  example: []
  syntax:
    content: public Player Player { get; set; }
    parameters: []
    return:
      type: Player
    content.vb: Public Property Player As Player
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Player*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.GameObject
  commentId: P:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.GameObject
  id: GameObject
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: GameObject
  nameWithType: TeleportingEventArgs.GameObject
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.GameObject
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: GameObject
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 51
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets the game object that is being teleported. May be null.\n"
  example: []
  syntax:
    content: public GameObject GameObject { get; set; }
    parameters: []
    return:
      type: GameObject
    content.vb: Public Property GameObject As GameObject
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.GameObject*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Destination
  commentId: P:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Destination
  id: Destination
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: Destination
  nameWithType: TeleportingEventArgs.Destination
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Destination
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: Destination
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 56
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets the destination of the teleport.\n"
  example: []
  syntax:
    content: public Vector3 Destination { get; set; }
    parameters: []
    return:
      type: Vector3
    content.vb: Public Property Destination As Vector3
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Destination*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.PlayerRotation
  commentId: P:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.PlayerRotation
  id: PlayerRotation
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: PlayerRotation
  nameWithType: TeleportingEventArgs.PlayerRotation
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.PlayerRotation
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: PlayerRotation
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 61
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets the forced rotation of the player after teleport.\n"
  example: []
  syntax:
    content: public PlayerMovementSync.PlayerRotation PlayerRotation { get; set; }
    parameters: []
    return:
      type: PlayerMovementSync.PlayerRotation
    content.vb: Public Property PlayerRotation As PlayerMovementSync.PlayerRotation
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.PlayerRotation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportSoundId
  commentId: P:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportSoundId
  id: TeleportSoundId
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: TeleportSoundId
  nameWithType: TeleportingEventArgs.TeleportSoundId
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportSoundId
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: TeleportSoundId
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 66
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets the teleport sound id played after teleport.\n"
  example: []
  syntax:
    content: public int TeleportSoundId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property TeleportSoundId As Integer
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportSoundId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.IsAllowed
  commentId: P:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.IsAllowed
  id: IsAllowed
  parent: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  langs:
  - csharp
  - vb
  name: IsAllowed
  nameWithType: TeleportingEventArgs.IsAllowed
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.IsAllowed
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/TeleportingEventArgs.cs
    id: IsAllowed
    path: Events/EventArgs/TeleportingEventArgs.cs
    startLine: 71
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets a value indicating whether the teleport can teleport the object.\n"
  example: []
  syntax:
    content: public bool IsAllowed { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsAllowed As Boolean
  overload: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.IsAllowed*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: MapEditorReborn.Events.EventArgs
  commentId: N:MapEditorReborn.Events.EventArgs
  name: MapEditorReborn.Events.EventArgs
  nameWithType: MapEditorReborn.Events.EventArgs
  fullName: MapEditorReborn.Events.EventArgs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  commentId: T:MapEditorReborn.Events.EventArgs.TeleportingEventArgs
  name: TeleportingEventArgs
  nameWithType: TeleportingEventArgs
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.#ctor*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.#ctor
  name: TeleportingEventArgs
  nameWithType: TeleportingEventArgs.TeleportingEventArgs
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportingEventArgs
- uid: TeleportObject
  isExternal: true
  name: TeleportObject
  nameWithType: TeleportObject
  fullName: TeleportObject
- uid: Player
  isExternal: true
  name: Player
  nameWithType: Player
  fullName: Player
- uid: GameObject
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: GameObject
- uid: Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: Vector3
- uid: PlayerMovementSync.PlayerRotation
  isExternal: true
  name: PlayerMovementSync.PlayerRotation
  nameWithType: PlayerMovementSync.PlayerRotation
  fullName: PlayerMovementSync.PlayerRotation
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.EntranceTeleport*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.EntranceTeleport
  name: EntranceTeleport
  nameWithType: TeleportingEventArgs.EntranceTeleport
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.EntranceTeleport
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.ExitTeleport*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.ExitTeleport
  name: ExitTeleport
  nameWithType: TeleportingEventArgs.ExitTeleport
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.ExitTeleport
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Player*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Player
  name: Player
  nameWithType: TeleportingEventArgs.Player
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Player
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.GameObject*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.GameObject
  name: GameObject
  nameWithType: TeleportingEventArgs.GameObject
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.GameObject
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Destination*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Destination
  name: Destination
  nameWithType: TeleportingEventArgs.Destination
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.Destination
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.PlayerRotation*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.PlayerRotation
  name: PlayerRotation
  nameWithType: TeleportingEventArgs.PlayerRotation
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.PlayerRotation
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportSoundId*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportSoundId
  name: TeleportSoundId
  nameWithType: TeleportingEventArgs.TeleportSoundId
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.TeleportSoundId
- uid: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.IsAllowed*
  commentId: Overload:MapEditorReborn.Events.EventArgs.TeleportingEventArgs.IsAllowed
  name: IsAllowed
  nameWithType: TeleportingEventArgs.IsAllowed
  fullName: MapEditorReborn.Events.EventArgs.TeleportingEventArgs.IsAllowed
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
