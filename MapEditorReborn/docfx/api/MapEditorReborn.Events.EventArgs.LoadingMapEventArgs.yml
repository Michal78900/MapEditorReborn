### YamlMime:ManagedReference
items:
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  commentId: T:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  id: LoadingMapEventArgs
  parent: MapEditorReborn.Events.EventArgs
  children:
  - MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.#ctor(MapSchematic,MapSchematic,System.Boolean)
  - MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed
  - MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap
  - MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap
  - MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.Response
  langs:
  - csharp
  - vb
  name: LoadingMapEventArgs
  nameWithType: LoadingMapEventArgs
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  type: Class
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/LoadingMapEventArgs.cs
    id: LoadingMapEventArgs
    path: Events/EventArgs/LoadingMapEventArgs.cs
    startLine: 15
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nContains all information before the <see cref=\"!:MapSchematic\"></see> is loaded.\n"
  example: []
  syntax:
    content: 'public class LoadingMapEventArgs : EventArgs'
    content.vb: >-
      Public Class LoadingMapEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.#ctor(MapSchematic,MapSchematic,System.Boolean)
  commentId: M:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.#ctor(MapSchematic,MapSchematic,System.Boolean)
  id: '#ctor(MapSchematic,MapSchematic,System.Boolean)'
  parent: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  langs:
  - csharp
  - vb
  name: LoadingMapEventArgs(MapSchematic, MapSchematic, Boolean)
  nameWithType: LoadingMapEventArgs.LoadingMapEventArgs(MapSchematic, MapSchematic, Boolean)
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.LoadingMapEventArgs(MapSchematic, MapSchematic, System.Boolean)
  type: Constructor
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/LoadingMapEventArgs.cs
    id: .ctor
    path: Events/EventArgs/LoadingMapEventArgs.cs
    startLine: 23
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nInitializes a new instance of the <xref href=\"MapEditorReborn.Events.EventArgs.LoadingMapEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public LoadingMapEventArgs(MapSchematic oldMap, MapSchematic newMap, bool isAllowed = true)
    parameters:
    - id: oldMap
      type: MapSchematic
      description: <inheritdoc cref="P:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap"></inheritdoc>
    - id: newMap
      type: MapSchematic
      description: <inheritdoc cref="P:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap"></inheritdoc>
    - id: isAllowed
      type: System.Boolean
      description: <inheritdoc cref="P:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed"></inheritdoc>
    content.vb: Public Sub New(oldMap As MapSchematic, newMap As MapSchematic, isAllowed As Boolean = True)
  overload: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap
  commentId: P:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap
  id: OldMap
  parent: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  langs:
  - csharp
  - vb
  name: OldMap
  nameWithType: LoadingMapEventArgs.OldMap
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/LoadingMapEventArgs.cs
    id: OldMap
    path: Events/EventArgs/LoadingMapEventArgs.cs
    startLine: 33
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets the currently loaded map.\n"
  example: []
  syntax:
    content: public MapSchematic OldMap { get; }
    parameters: []
    return:
      type: MapSchematic
    content.vb: Public ReadOnly Property OldMap As MapSchematic
  overload: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap
  commentId: P:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap
  id: NewMap
  parent: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  langs:
  - csharp
  - vb
  name: NewMap
  nameWithType: LoadingMapEventArgs.NewMap
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/LoadingMapEventArgs.cs
    id: NewMap
    path: Events/EventArgs/LoadingMapEventArgs.cs
    startLine: 38
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets the map that will be loaded.\n"
  example: []
  syntax:
    content: public MapSchematic NewMap { get; set; }
    parameters: []
    return:
      type: MapSchematic
    content.vb: Public Property NewMap As MapSchematic
  overload: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.Response
  commentId: P:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.Response
  id: Response
  parent: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  langs:
  - csharp
  - vb
  name: Response
  nameWithType: LoadingMapEventArgs.Response
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.Response
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/LoadingMapEventArgs.cs
    id: Response
    path: Events/EventArgs/LoadingMapEventArgs.cs
    startLine: 43
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets the response to be displayed if the event cannot be executed.\n"
  example: []
  syntax:
    content: public string Response { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Response As String
  overload: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.Response*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed
  commentId: P:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed
  id: IsAllowed
  parent: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  langs:
  - csharp
  - vb
  name: IsAllowed
  nameWithType: LoadingMapEventArgs.IsAllowed
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed
  type: Property
  source:
    remote:
      path: C:/Users/minerpl/RiderProjects/MapEditorReborn/Events/EventArgs/LoadingMapEventArgs.cs
    id: IsAllowed
    path: Events/EventArgs/LoadingMapEventArgs.cs
    startLine: 48
  assemblies:
  - MapEditorReborn
  namespace: MapEditorReborn.Events.EventArgs
  summary: "\nGets or sets a value indicating whether the map will be loaded.\n"
  example: []
  syntax:
    content: public bool IsAllowed { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsAllowed As Boolean
  overload: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: MapEditorReborn.Events.EventArgs
  commentId: N:MapEditorReborn.Events.EventArgs
  name: MapEditorReborn.Events.EventArgs
  nameWithType: MapEditorReborn.Events.EventArgs
  fullName: MapEditorReborn.Events.EventArgs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  commentId: T:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
  name: LoadingMapEventArgs
  nameWithType: LoadingMapEventArgs
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.#ctor*
  commentId: Overload:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.#ctor
  name: LoadingMapEventArgs
  nameWithType: LoadingMapEventArgs.LoadingMapEventArgs
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.LoadingMapEventArgs
- uid: MapSchematic
  isExternal: true
  name: MapSchematic
  nameWithType: MapSchematic
  fullName: MapSchematic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap*
  commentId: Overload:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap
  name: OldMap
  nameWithType: LoadingMapEventArgs.OldMap
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.OldMap
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap*
  commentId: Overload:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap
  name: NewMap
  nameWithType: LoadingMapEventArgs.NewMap
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.NewMap
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.Response*
  commentId: Overload:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.Response
  name: Response
  nameWithType: LoadingMapEventArgs.Response
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.Response
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed*
  commentId: Overload:MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed
  name: IsAllowed
  nameWithType: LoadingMapEventArgs.IsAllowed
  fullName: MapEditorReborn.Events.EventArgs.LoadingMapEventArgs.IsAllowed
